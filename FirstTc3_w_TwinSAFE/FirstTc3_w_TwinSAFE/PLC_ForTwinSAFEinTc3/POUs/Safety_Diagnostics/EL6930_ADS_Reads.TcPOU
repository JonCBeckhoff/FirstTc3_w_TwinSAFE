<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.14">
  <POU Name="EL6930_ADS_Reads" Id="{93e1c098-b67a-4f17-8492-1ab37f66e1cd}">
    <Declaration><![CDATA[PROGRAM EL6930_ADS_Reads
//		8-2-2012
// 		This Program has been supplied by Beckhoff Automation As-Is and is intended only as an example 
//		implementation. Functionality is not guaranteed. 
//
VAR
	//Time to check CoE values
	T1							: 		TON ;
	xExecute					: 		BOOL ;
	tTime1						: 		TIME ;

	//Counter for just some very simple sequencing
	C1							: 		CTU ;
	xReset						: 		BOOL ;
	wPreset						: 		WORD := 10 ;
	xDone						: 		BOOL ;
	wCount						: 		WORD ;

	//Read the serial number out of the EL6930
	fbEL6930Sn_ADSRead			: 		ADSREAD ;
	dwEL6930_Sn					: 		DWORD ;
	xEL6930Sn_busy				: 		BOOL ;
	xEL6930Sn_Err				: 		BOOL ;
	xEL6930Sn_ErrID				: 		UDINT ;

	//Read the DIP Switch Setting out of the EL6930
	fbEL6930DSw_ADSRead			: 		ADSREAD ;
	wEL6930_DSw					: 		WORD ;
	xEL6930DSw_busy				: 		BOOL ;
	xEL6930DSw_Err				: 		BOOL ;
	udiEL6930DSw_ErrID			: 		UDINT ;

	//Read the Hardware Version of the EL6930 Logic Terminal
	fbEL6930_HWvers_EcCoESdoRead: 		FB_EcCoESdoRead ;
	sEL6930_HWvers				: 		STRING(2) ;
	xEL6930_HWvers_Busy			: 		BOOL ;
	xEL6930_HWvers_Err			: 		BOOL ;
	udiEL6930_HWvers_ErrID		: 		UDINT ;

	//Read the Software Version of the EL6930 Logic Terminal (It's f/w)
	fbEL6930_FWvers_EcCoESdoRead: 		FB_EcCoESdoRead ;
	sEL6930_FWvers				: 		STRING(2) ;
	xEL6930_FWvers_Busy			: 		BOOL ;
	xEL6930_FWvers_Err			: 		BOOL ;
	udiEL6930_FWvers_ErrID		: 		UDINT ;

	//Read the Number Of Connections Configured In The EL6930 Logic Terminal
	fbEL6930_StatConn_EcCoESdoRead: 	FB_EcCoESdoRead ;
	bNoOfConnections			: 		BYTE ;
	bEL6930_NoOfConnections		: 		BYTE ;
	xEL6930_NoOfConnections_Busy: 		BOOL ;
	xEL6930_NoOfConnections_Err	: 		BOOL ;
	udiEL6930_NoOfConnections_ErrID: 	UDINT ;

	//Read the Number Of Safety Groups Configured In The EL6930 Logic Terminal
	fbEL6930_SafetyGrps_EcCoESdoRead: 	FB_EcCoESdoRead ;
	bEL6930_NoOfSafetyGrps		: 		BYTE ;
	xEL6930_NoOfSafetyGrps_Busy	: 		BOOL ;
	xEL6930_NoOfSafetyGrps_Err	: 		BOOL ;
	udiEL6930_NoOfSafetyGrps_ErrID: 	UDINT ;

	//Read the Number Of Safety Function Blocks Configured In The EL6930 Logic Terminal
	fbEL6930_SafetyFBs_EcCoESdoRead: 	FB_EcCoESdoRead ;
	bEL6930_NoOfSafetyFBs		: 		BYTE ;
	xEL6930_NoOfSafetyFBs_Busy	: 		BOOL ;
	xEL6930_NoOfSafetyFBs_Err	: 		BOOL ;
	udiEL6930_NoOfSafetyFBs_ErrID: 		UDINT ;
	
	//Read the Primary Micro Controller (MC1) Temperature in DegC out of the EL6930
	fbEL6930PriMCTemp_ADSRead	: 		ADSREAD ;
	wEL6930_PriMCTemp			: 		WORD ;
	xEL6930PriMCTemp_busy		: 		BOOL ;
	xEL6930PriMCTemp_Err		: 		BOOL ;
	udiEL6930PriMCTemp_ErrID	: 		UDINT ;

	//Read the Secondary Micro Controller (MC2) Temperature in DegC out of the EL6930
	fbEL6930SecMCTemp_ADSRead	: 		ADSREAD ;
	wEL6930_SecMCTemp			: 		WORD ;
	xEL6930SecMCTemp_busy		: 		BOOL ;
	xEL6930SecMCTemp_Err		: 		BOOL ;
	udiEL6930SecMCTemp_ErrID	: 		UDINT ;

	//Read the Primary Micro Controller (MC1) Voltage in mV out of the EL6930
	fbEL6930PriMCmV_ADSRead		: 		ADSREAD ;
	wEL6930_PriMCmV				: 		WORD ;
	xEL6930PriMCmV_busy			: 		BOOL ;
	xEL6930PriMCmV_Err			: 		BOOL ;
	udiEL6930PriMCmV_ErrID		: 		UDINT ;

	//Read the Secondary Micro Controller (MC2) Voltage in mV out of the EL6930
	fbEL6930SecMCmV_ADSRead		: 		ADSREAD ;
	wEL6930_SecMCmV				: 		WORD ;
	xEL6930SecMCmV_busy			: 		BOOL ;
	xEL6930SecMCmV_Err			: 		BOOL ;
	udiEL6930SecMCmV_ErrID		: 		UDINT ;

	// EL6930: Temperature and Voltage Errors
	//There are two temperature sensors inside each Microcontroller
	fbEL6930_Error_ADSRead		: 		ADSREAD ;
	wEL6930_Error				: 		WORD ;
	xEL6930Error_busy			: 		BOOL ;
	xEL6930Error_Err			: 		BOOL ;
	udiEL6930Error_ErrID		: 		UDINT ;
END_VAR
VAR_INPUT
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//		8-2-2012
// 		This Program has been supplied by Beckhoff Automation As-Is and is intended only as an example 
//		implementation. Functionality is not guaranteed. 
//
IF g_bHMI_ScreenBeingDisplayed = 50 THEN
// Interval timer for CoE Reads
T1(
						IN				:= 		NOT xExecute, 
						PT				:=		T#500MS, 
						Q				=>		xExecute, 
						ET				=>		tTime1 ) ;

C1(
						CU				:= 		xExecute, 
						RESET			:= 		xReset, 
						PV				:= 		wPreset, 
						Q				=> 		xDone, 
						CV				=> 		wCount) ;

IF C1.CV > 6 	THEN xReset := 1 ;
				ELSE xReset := 0 ; 
END_IF ;

// Read the serial number out of the EL6930
fbEL6930Sn_ADSRead(
						NETID			:= 		gc_sADSNetID, 
						PORT			:= 		gc_uiEL6930_EtherCATAdr, 
						IDXGRP			:= 		16#F302, 
						IDXOFFS			:= 		16#F9800002, 
						LEN				:= 		4, 
						DESTADDR		:= 		ADR(dwEL6930_Sn), 
						READ			:= 		xExecute, 
						TMOUT			:= 		T#2S, 
						BUSY			=> 		xEL6930Sn_busy, 
						ERR				=> 		xEL6930Sn_Err, 
						ERRID			=> 		xEL6930Sn_ErrID );

g_dwHMI_EL6930Sn 						:= 		dwEL6930_Sn ;

// Read the DIP Switch Setting out of the EL6930
IF C1.CV = 1 THEN
fbEL6930DSw_ADSRead(
						NETID			:= 		gc_sADSNetID, 
						PORT			:= 		gc_uiEL6930_EtherCATAdr, 
						IDXGRP			:= 		16#F302, 
						IDXOFFS			:= 		16#F9800001, 
						LEN				:= 		2, 
						DESTADDR		:= 		ADR(wEL6930_DSw), 
						READ			:= 		xExecute, 
						TMOUT			:= 		T#2S, 
						BUSY			=> 		xEL6930DSw_busy, 
						ERR				=> 		xEL6930DSw_Err, 
						ERRID			=> 		udiEL6930DSw_ErrID );

g_wHMI_EL6930DSw 						:= 		wEL6930_DSw ;
END_IF ;						

//Read the Hardware Version of the EL6930 Logic Terminal
fbEL6930_HWvers_EcCoESdoRead(
						sNetId			:= 		gc_sADSNetID, 
						nSlaveAddr		:= 		gc_uiEL6930_EtherCATAdr, 
						nSubIndex		:= 		0, 
						nIndex			:= 		16#1009, 
						pDstBuf			:=  	ADR(sEL6930_HWvers),
						cbBufLen		:= 		SIZEOF(sEL6930_HWvers), 
						bExecute		:= 		xExecute, 
						tTimeout		:= 		T#2S, 
						bBusy			=> 		xEL6930_HWvers_Busy, 
						bError			=> 		xEL6930_HWvers_Err, 
						nErrId			=> 		udiEL6930_HWvers_ErrID ) ;

g_sHMI_EL6930_HWvers					:= 		sEL6930_HWvers ;

//Read the Software Version of the EL6930 Logic Terminal (It's f/w)
fbEL6930_FWvers_EcCoESdoRead(
						sNetId			:= 		gc_sADSNetID, 
						nSlaveAddr		:= 		gc_uiEL6930_EtherCATAdr, 
						nSubIndex		:= 		0, 
						nIndex			:= 		16#100A, 
						pDstBuf			:=  	ADR(sEL6930_FWvers),
						cbBufLen		:= 		SIZEOF(sEL6930_FWvers), 
						bExecute		:= 		xExecute, 
						tTimeout		:= 		T#2S, 
						bBusy			=> 		xEL6930_FWvers_Busy, 
						bError			=> 		xEL6930_FWvers_Err, 
						nErrId			=> 		udiEL6930_FWvers_ErrID ) ;

g_sHMI_EL6930_FWvers					:= 		sEL6930_FWvers ;

//Read the Number Of Connections Configured In The EL6930 Logic Terminal
fbEL6930_StatConn_EcCoESdoRead(
						sNetId			:= 		gc_sADSNetID, 
						nSlaveAddr		:= 		gc_uiEL6930_EtherCATAdr, 
						nSubIndex		:= 		0, 
						nIndex			:= 		16#2110, 
						pDstBuf			:=  	ADR(bEL6930_NoOfConnections),
						cbBufLen		:= 		SIZEOF(bEL6930_NoOfConnections), 
						bExecute		:= 		xExecute, 
						tTimeout		:= 		T#2S, 
						bBusy			=> 		xEL6930_NoOfConnections_Busy, 
						bError			=> 		xEL6930_NoOfConnections_Err, 
						nErrId			=> 		udiEL6930_NoOfConnections_ErrID ) ;

g_bHMI_EL6930_NoOfConnections			:= 		bEL6930_NoOfConnections ;					

//Read the Number Of Safety Groups Configured In The EL6930 Logic Terminal
fbEL6930_SafetyGrps_EcCoESdoRead(
						sNetId			:= 		gc_sADSNetID, 
						nSlaveAddr		:= 		gc_uiEL6930_EtherCATAdr, 
						nSubIndex		:= 		0, 
						nIndex			:= 		16#2120, 
						pDstBuf			:=  	ADR(bEL6930_NoOfSafetyGrps),
						cbBufLen		:= 		SIZEOF(bEL6930_NoOfSafetyGrps), 
						bExecute		:= 		xExecute, 
						tTimeout		:= 		T#2S, 
						bBusy			=> 		xEL6930_NoOfSafetyGrps_Busy, 
						bError			=> 		xEL6930_NoOfSafetyGrps_Err, 
						nErrId			=> 		udiEL6930_NoOfSafetyGrps_ErrID ) ;

g_bHMI_EL6930_NoOfSafetyGrps			:= 		bEL6930_NoOfSafetyGrps ;

//Read the Number Of Safety Function Blocks Configured In The EL6930 Logic Terminal
fbEL6930_SafetyFBs_EcCoESdoRead(
						sNetId			:= 		gc_sADSNetID, 
						nSlaveAddr		:= 		gc_uiEL6930_EtherCATAdr, 
						nSubIndex		:= 		0, 
						nIndex			:= 		16#2130, 
						pDstBuf			:=  	ADR(bEL6930_NoOfSafetyFBs),
						cbBufLen		:= 		SIZEOF(bEL6930_NoOfSafetyFBs), 
						bExecute		:= 		xExecute, 
						tTimeout		:= 		T#2S, 
						bBusy			=> 		xEL6930_NoOfSafetyFBs_Busy, 
						bError			=> 		xEL6930_NoOfSafetyFBs_Err, 
						nErrId			=> 		udiEL6930_NoOfSafetyFBs_ErrID ) ;

g_bHMI_EL6930_NoOfSafetyFBs			:= 		bEL6930_NoOfSafetyFBs ;

// Read the Primary Micro Controller (MC1) Temperature in DegC out of the EL6930
IF C1.CV = 2 THEN
fbEL6930PriMCTemp_ADSRead(
						NETID			:= 		gc_sADSNetID, 
						PORT			:= 		gc_uiEL6930_EtherCATAdr, 
						IDXGRP			:= 		16#F302, 
						IDXOFFS			:= 		16#FA800001, 
						LEN				:= 		2, 
						DESTADDR		:= 		ADR(wEL6930_PriMCTemp), 
						READ			:= 		xExecute, 
						TMOUT			:= 		T#2S, 
						BUSY			=> 		xEL6930PriMCTemp_busy, 
						ERR				=> 		xEL6930PriMCTemp_Err, 
						ERRID			=> 		udiEL6930PriMCTemp_ErrID );

g_wHMI_EL6930PriMCTemp 						:= 		wEL6930_PriMCTemp ;
END_IF ;

// Read the Secondary Micro Controller (MC2) Temperature in DegC out of the EL6930
IF C1.CV = 3 THEN
fbEL6930SecMCTemp_ADSRead(
						NETID			:= 		gc_sADSNetID, 
						PORT			:= 		gc_uiEL6930_EtherCATAdr, 
						IDXGRP			:= 		16#F302, 
						IDXOFFS			:= 		16#FA800002, 
						LEN				:= 		2, 
						DESTADDR		:= 		ADR(wEL6930_SecMCTemp), 
						READ			:= 		xExecute, 
						TMOUT			:= 		T#2S, 
						BUSY			=> 		xEL6930SecMCTemp_busy, 
						ERR				=> 		xEL6930SecMCTemp_Err, 
						ERRID			=> 		udiEL6930SecMCTemp_ErrID );

g_wHMI_EL6930SecMCTemp 						:= 		wEL6930_SecMCTemp ;
END_IF ;

// Read the Primary Micro Controller (MC1) Voltage in mV out of the EL6930
IF C1.CV = 4 THEN
fbEL6930PriMCmV_ADSRead(
						NETID			:= 		gc_sADSNetID, 
						PORT			:= 		gc_uiEL6930_EtherCATAdr, 
						IDXGRP			:= 		16#F302, 
						IDXOFFS			:= 		16#FA800003, 
						LEN				:= 		2, 
						DESTADDR		:= 		ADR(wEL6930_PriMCmV), 
						READ			:= 		xExecute, 
						TMOUT			:= 		T#2S, 
						BUSY			=> 		xEL6930PriMCmV_busy, 
						ERR				=> 		xEL6930PriMCmV_Err, 
						ERRID			=> 		udiEL6930PriMCmV_ErrID );

g_wHMI_EL6930PriMC_Volts				:= 		WORD_TO_LREAL(wEL6930_PriMCmV) / 1000.0 ;
END_IF ;

// Read the Secondary Micro Controller (MC2) Voltage in mV out of the EL6930
IF C1.CV = 5 THEN
fbEL6930SecMCmV_ADSRead(
						NETID			:= 		gc_sADSNetID, 
						PORT			:= 		gc_uiEL6930_EtherCATAdr, 
						IDXGRP			:= 		16#F302, 
						IDXOFFS			:= 		16#FA800004, 
						LEN				:= 		2, 
						DESTADDR		:= 		ADR(wEL6930_SecMCmV), 
						READ			:= 		xExecute, 
						TMOUT			:= 		T#2S, 
						BUSY			=> 		xEL6930SecMCmV_busy, 
						ERR				=> 		xEL6930SecMCmV_Err, 
						ERRID			=> 		udiEL6930SecMCmV_ErrID );
			
g_wHMI_EL6930SecMC_Volts 				:= 		WORD_TO_LREAL(wEL6930_SecMCmV) / 1000.0 ;
END_IF ;
	ELSE xReset := 1 ;
	END_IF ;

//EL6930: Temperature and Voltage Errors
//There are two temperature sensors inside each Microcontroller
fbEL6930_Error_ADSRead(
						NETID			:= 		gc_sADSNetID, 
						PORT			:= 		gc_uiEL6930_EtherCATAdr, 
						IDXGRP			:= 		16#F302, 
						IDXOFFS			:= 		16#FA000003, 
						LEN				:= 		2, 
						DESTADDR		:= 		ADR(wEL6930_Error), 
						READ			:= 		xExecute, 
						TMOUT			:= 		T#2S, 
						BUSY			=> 		xEL6930Error_busy, 
						ERR				=> 		xEL6930Error_Err, 
						ERRID			=> 		udiEL6930Error_ErrID );
			
//These errors may only be present temporarily so they need to be latched and then cleared
//to be properly noted by the operator
g_xHMI_EL6930_MaxTemp				:= 		(wEL6930_Error = 5) OR (g_xHMI_EL6930_MaxTemp AND NOT g_xHMI_EL6930_ErrClearPB) ;
g_xHMI_EL6930_MinTemp				:= 		(wEL6930_Error = 6) OR (g_xHMI_EL6930_MinTemp AND NOT g_xHMI_EL6930_ErrClearPB) ;
g_xHMI_EL6930_TempDiffExceeded		:= 		(wEL6930_Error = 7) OR (g_xHMI_EL6930_TempDiffExceeded AND NOT g_xHMI_EL6930_ErrClearPB) ;
g_xHMI_EL6930_MaxVccMC1				:= 		(wEL6930_Error = 257) OR (g_xHMI_EL6930_MaxVccMC1 AND NOT g_xHMI_EL6930_ErrClearPB) ;
g_xHMI_EL6930_MaxVccMC2				:= 		(wEL6930_Error = 258) OR (g_xHMI_EL6930_MaxVccMC2 AND NOT g_xHMI_EL6930_ErrClearPB) ;
g_xHMI_EL6930_MinVccMC1				:= 		(wEL6930_Error = 259) OR (g_xHMI_EL6930_MinVccMC1 AND NOT g_xHMI_EL6930_ErrClearPB) ;
g_xHMI_EL6930_MinVccMC2				:= 		(wEL6930_Error = 260) OR (g_xHMI_EL6930_MinVccMC2 AND NOT g_xHMI_EL6930_ErrClearPB) ;

//Sum of all errors we know of in the EL6930 terminal
IF 		g_xHMI_EL6930_MaxTemp 
	OR 	g_xHMI_EL6930_MinTemp
	OR 	g_xHMI_EL6930_TempDiffExceeded 
	OR 	g_xHMI_EL6930_MaxVccMC1
	OR 	g_xHMI_EL6930_MaxVccMC2
	OR 	g_xHMI_EL6930_MinVccMC1
	OR 	g_xHMI_EL6930_MinVccMC2
		THEN g_xHMI_EL6930_General_Error := TRUE ;
		ELSE g_xHMI_EL6930_General_Error := FALSE ;
END_IF ;
]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>