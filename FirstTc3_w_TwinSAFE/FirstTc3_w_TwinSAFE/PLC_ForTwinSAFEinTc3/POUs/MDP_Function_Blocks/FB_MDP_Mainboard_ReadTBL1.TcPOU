<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.18">
  <POU Name="FB_MDP_Mainboard_ReadTBL1" Id="{2006ff1d-1931-4df7-ad53-92c1c36d7b16}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MDP_Mainboard_ReadTBL1

VAR_INPUT
	xExecute				: BOOL;								// Function block execution is triggered by a rising edge at this input
	tTimeout				: TIME		:= DEFAULT_ADS_TIMEOUT;	// States the time before the function is cancelled
	usiModIdx				: USINT		:= 0;					// Index number of chosen MDP device
	sAmsNetId				: T_AmsNetId;						// keep empty '' for the local device
END_VAR

VAR_OUTPUT
	xBusy					: BOOL;
	xError					: BOOL;
	udiErrID				: UDINT;
	usiErrPos				: USINT;							// If a subindex is not supported, iErrPos indicates at which subindex the error appears first
	stMDP_ModuleHeader		: ST_MDP_ModuleHeader;
	stMDP_ModuleContent		: ST_MDP_MainboardTBL1;	
END_VAR

VAR
	fbMDP_ReadModule		: FB_MDP_ReadModule;
	arrData					: ARRAY[0..60] OF BYTE;				// requested data
	arrStartIdx				: ARRAY[0..15] OF UINT;				// startindexes in bytes of each subindex element

	stMDP_Addr				: ST_MDP_Addr;
	eModuleType				: E_MDP_ModuleType;
	usiSubIdxCount			: USINT;

	xSubExecute				: BOOL;
	xReadBusy				: BOOL;

	RisingEdge				: R_TRIG;
	TimeOut					: TON;								// general timeout	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[RisingEdge( CLK					:= xExecute );
IF NOT xBusy THEN										// FB only react to the external execute if it is not busy
	IF RisingEdge.Q THEN
		xBusy					:= TRUE;

		// reset variables
		xError					:= FALSE;
		udiErrID				:= 0;
		usiErrPos				:= 0;
		xSubExecute				:= TRUE;

		// specific values for Mainboard content
		stMDP_Addr.nArea		:= 16#08;
//		stMDP_Addr.nModuleId;							will be allocated dynamically
		stMDP_Addr.nTableId		:= 16#01;
//		stMDP_Addr.nFlag;								not used up to now
//		stMDP_Addr.nSubIdx;								all subindexes will be requested
		eModuleType				:= eMDP_ModT_Mainboard;
		usiSubIdxCount			:= 11;					// TableId 16#01 contains 10 elements

		MEMSET( ADR(arrData), 0, SIZEOF(arrData) );		// reset buffer

		TimeOut(IN 				:= FALSE);
		TimeOut(PT 				:= tTimeout, IN 	:= TRUE);
	END_IF
END_IF


IF xBusy THEN
	IF xSubExecute THEN
		xSubExecute 			:= FALSE;

		fbMDP_ReadModule( bExecute := FALSE );
		fbMDP_ReadModule(
			stMDP_Addr			:= stMDP_Addr,
			eModuleType			:= eModuleType,
			iModIdx				:= usiModIdx,
			iSubIdxCount		:= usiSubIdxCount,
			bExecute			:= TRUE,
			tTimeout			:= tTimeout,
			pDstBuf				:= ADR(arrData),
			cbDstBufLen			:= SIZEOF(arrData),
			sAmsNetId			:= sAmsNetId,

			bBusy				=> xReadBusy,
			bError				=> xError,
			nErrID				=> udiErrID,
			iErrPos				=> usiErrPos,
			stMDP_DynAddr		=> ,
			iModuleTypeCount	=> ,
			iModuleCount		=> ,
			stMDP_ModuleHeader	=> ,
			arrStartIdx			=> ,
		);
	ELSE
		fbMDP_ReadModule(
			bExecute			:= FALSE,

			bBusy				=> xReadBusy,
			bError				=> xError,
			nErrID 				=> udiErrID,
			iErrPos				=> usiErrPos,
		 );
		IF NOT xReadBusy THEN
			// allocate received module header
			stMDP_ModuleHeader	:= fbMDP_ReadModule.stMDP_ModuleHeader;
			// allocate information of startindexes in data buffer
			MEMCPY(ADR(arrStartIdx), ADR(fbMDP_ReadModule.arrStartIdx), SIZEOF(arrStartIdx) );
			// reset module content struct
			MEMSET( ADR(stMDP_ModuleContent), 0, SIZEOF(stMDP_ModuleContent) );
			// allocate received data to NIC struct
			stMDP_ModuleContent.uiLen		:= arrData[0];
			MEMCPY(ADR(stMDP_ModuleContent.sMainboardType),			ADR(arrData)+arrStartIdx[1],	MIN(arrStartIdx[2]-arrStartIdx[1],	SIZEOF(stMDP_ModuleContent.sMainboardType))     );
			MEMCPY(ADR(stMDP_ModuleContent.sMainboardSN),			ADR(arrData)+arrStartIdx[2],	MIN(arrStartIdx[3]-arrStartIdx[2],	SIZEOF(stMDP_ModuleContent.sMainboardSN))     );
			MEMCPY(ADR(stMDP_ModuleContent.sMainboardProdDate),		ADR(arrData)+arrStartIdx[3],	MIN(arrStartIdx[4]-arrStartIdx[3],	SIZEOF(stMDP_ModuleContent.sMainboardProdDate))     );
			MEMCPY(ADR(stMDP_ModuleContent.udiMainboardBootCount),	ADR(arrData)+arrStartIdx[4],	MIN(arrStartIdx[5]-arrStartIdx[4],	SIZEOF(stMDP_ModuleContent.udiMainboardBootCount))     );
			MEMCPY(ADR(stMDP_ModuleContent.udiMainboardOperTime),	ADR(arrData)+arrStartIdx[5],	MIN(arrStartIdx[6]-arrStartIdx[5],	SIZEOF(stMDP_ModuleContent.udiMainboardOperTime))     );
			MEMCPY(ADR(stMDP_ModuleContent.diMainboardMinTemp),		ADR(arrData)+arrStartIdx[6],	MIN(arrStartIdx[7]-arrStartIdx[6],	SIZEOF(stMDP_ModuleContent.diMainboardMinTemp))     );
			MEMCPY(ADR(stMDP_ModuleContent.diMainboardMaxTemp),		ADR(arrData)+arrStartIdx[7],	MIN(arrStartIdx[8]-arrStartIdx[7],	SIZEOF(stMDP_ModuleContent.diMainboardMaxTemp))     );
			MEMCPY(ADR(stMDP_ModuleContent.diMainboardMinVolt),		ADR(arrData)+arrStartIdx[8],	MIN(arrStartIdx[9]-arrStartIdx[8],	SIZEOF(stMDP_ModuleContent.diMainboardMinVolt))     );
			MEMCPY(ADR(stMDP_ModuleContent.diMainboardMaxVolt),		ADR(arrData)+arrStartIdx[9],	MIN(arrStartIdx[10]-arrStartIdx[9],	SIZEOF(stMDP_ModuleContent.diMainboardMaxVolt))     );
			MEMCPY(ADR(stMDP_ModuleContent.iMainboardActualTemp),	ADR(arrData)+arrStartIdx[10],	MIN(arrStartIdx[11]-arrStartIdx[10],SIZEOF(stMDP_ModuleContent.iMainboardActualTemp))     );

			// reset FB
			xBusy 				:= FALSE;
		END_IF
	END_IF

	// check timeout
	TimeOut();
	IF TimeOut.Q THEN
		TimeOut(IN 				:= FALSE);
		xError					:= TRUE;
		udiErrID				:= INT_TO_UINT(eMDP_Err_PLC) * 16#10000 + INT_TO_UINT(eMDP_ErrPLC_TimeOut);
	END_IF
END_IF

IF xError THEN
	// reset FB
	xBusy 						:= FALSE;
END_IF]]></ST>
    </Implementation>
    <ObjectProperties />
  </POU>
</TcPlcObject>